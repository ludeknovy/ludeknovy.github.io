{"componentChunkName":"component---src-templates-post-template-jsx","path":"/blog/custom-status-code-matcher/","result":{"data":{"site":{"siteMetadata":{"title":"ludeknovy.tech","subtitle":"Thoughts on testing and test automation","copyright":"© All rights reserved.","author":{"name":"","twitter":"#"},"disqusShortname":"","url":"https://wwww.ludeknovy.tech"}},"markdownRemark":{"id":"e575130a-aaaa-5a58-b6d9-19fe8b1ac279","html":"<p>Incorporating custom response code matcher in your codebase is going to increase the readability of your tests and make it a little bit more maintainable — transition to another http library would be easier, as you would need to change only custom matcher logic instead of changing assertion of all your tests. But the biggest benefit lies in vastly improved debugging experience and thus reducing the time spent exploring failed tests and gathering informations. In this article I am going to show you how you can achieve this in python using PyHamcrest library.</p>\n<p>If you ever had written any API automated test you certainly used an assertion for status code to ensure given endpoint behaves correctly. Using build-in python assert statement the very simple test could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">response <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://base_url/endpoint'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span></code></pre></div>\n<p>And at some point the assertion failed and it would produce following assertion error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> <span class=\"token number\">500</span> <span class=\"token operator\">==</span> <span class=\"token number\">200</span>\nwhere <span class=\"token number\">500</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span>status_code</code></pre></div>\n<p>Which is ok, but unfortunately it won’t provide you any other information e.g about error returned in response body by the server. We could improve the assert by adding response body as fail message:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">response <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://base_url/endpoint'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>text</code></pre></div>\n<p>This would produce error message like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AssertionError<span class=\"token punctuation\">:</span> \n<span class=\"token operator\">&lt;</span>Any API response body<span class=\"token operator\">></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">assert</span> <span class=\"token number\">500</span> <span class=\"token operator\">==</span> <span class=\"token number\">200</span>\nwhere <span class=\"token number\">500</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span>status_code</code></pre></div>\n<p>Alright, that would help a lot for debugging when any test fails, but it is not as clean solution as it could be.To make the code more cleaner we are going to implement custom response status code matcher using PyHamcrest library. This specific custom matcher expects that your test code uses <code class=\"language-text\">requests</code> library for making actual HTTP request, but you can easily adjust it for arbitrary http library.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># response_matcher.py</span>\n<span class=\"token keyword\">from</span> hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>base_matcher <span class=\"token keyword\">import</span> BaseMatcherfrom \n<span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> Response\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReturnedStatusCode</span><span class=\"token punctuation\">(</span>BaseMatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> status_code<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_status_code <span class=\"token operator\">=</span> status_code\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_matches</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>_status_code\n    <span class=\"token keyword\">def</span> <span class=\"token function\">describe_to</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        description<span class=\"token punctuation\">.</span>append_text<span class=\"token punctuation\">(</span><span class=\"token string\">\"status code \"</span><span class=\"token punctuation\">)</span>\n        description<span class=\"token punctuation\">.</span>append_description_of<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_status_code<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">describe_mismatch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> mismatch_description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        mismatch_description<span class=\"token punctuation\">.</span>append_text<span class=\"token punctuation\">(</span><span class=\"token string\">\"status code \"</span><span class=\"token punctuation\">)</span>\n        mismatch_description<span class=\"token punctuation\">.</span>append_description_of<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n        mismatch_description<span class=\"token punctuation\">.</span>append_text<span class=\"token punctuation\">(</span><span class=\"token string\">\" received with body: \\n\"</span><span class=\"token punctuation\">)</span>\n        mismatch_description<span class=\"token punctuation\">.</span>append_text<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">has_returned_status_code</span><span class=\"token punctuation\">(</span>status_code<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> ReturnedStatusCode<span class=\"token punctuation\">(</span>status_code<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we just need to import it and its ready for use:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> hamcrest <span class=\"token keyword\">import</span> assert_that\n<span class=\"token keyword\">from</span> response_matcher <span class=\"token keyword\">import</span> has_returned_status_code\n\nresponse <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://base_url/endpoint'</span><span class=\"token punctuation\">)</span>\nassert_that<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> has_returned_status_code<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And in case of test failure it would now produce following assertion error:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AssertionError<span class=\"token punctuation\">:</span> \nExpected<span class=\"token punctuation\">:</span> status code <span class=\"token operator\">&lt;</span><span class=\"token number\">200</span><span class=\"token operator\">></span>\n    but<span class=\"token punctuation\">:</span> status code <span class=\"token operator\">&lt;</span><span class=\"token number\">500</span><span class=\"token operator\">></span> received <span class=\"token keyword\">with</span> body<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>API response will be printed here<span class=\"token operator\">></span></code></pre></div>\n<p>In my eyes <code class=\"language-text\">assert_that(response, has_returned_status_code(200))</code> is more elegant solution than <code class=\"language-text\">assert response.status_code == 200</code> and providing very useful information for quick change assessment detected by API test.</p>\n<p>Happy API testing.</p>","fields":{"tagSlugs":["/tags/api-testing/","/tags/python/"],"slug":"/blog/custom-status-code-matcher/"},"frontmatter":{"title":"Custom status code matcher for API testing in Python with PyHamcrest","tags":["api testing","python"],"date":"2020-05-15T02:46:37.121Z","description":"Tutorial on how to create custom status code matcher with Python and PyHamcrest"}}},"pageContext":{"slug":"/blog/custom-status-code-matcher/"}},"staticQueryHashes":[]}