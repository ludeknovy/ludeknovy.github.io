{"componentChunkName":"component---src-templates-post-template-jsx","path":"/blog/custom-matcher-for-api-definition/","result":{"data":{"site":{"siteMetadata":{"title":"ludeknovy.tech","subtitle":"","copyright":"© All rights reserved.","author":{"name":"","twitter":"#"},"disqusShortname":"","url":"https://ludeknovy.tech"}},"markdownRemark":{"id":"3a34618f-7ab6-5bf1-bcfd-b85aeb34a9f2","html":"<p>In the other article I showed you how to create custom matcher for API status code. And today we are going to look at how to do the same for easy and fast testing of API response definition.</p>\n<p>For this purpose we are going to need <a href=\"https://github.com/kiwicom/schemathesis\">Schemathesis</a> library. This tool makes API definition testing very easy. It could be use as CLI or in-code as standard python package. And this is how Schemathesis describe itself:</p>\n<blockquote>\n<p>Schemathesis is a tool for testing your web applications built with Open API / Swagger specifications.\nIt reads the application schema and generates test cases which will ensure that your application is compliant with its schema.</p>\n</blockquote>\n<p>Thus Schemathesis can be used not only to assert that API response conforms to API definition but can be used to do property-based testing for specified API input. In this article we are going to focus only on API response assertions. If you’d like know more about Schemathesis check this <a href=\"https://code.kiwi.com/schemathesis-property-based-testing-for-api-schemas-52811fd2b0a4\">post</a> from its author.</p>\n<p>As in previous article we use PyHamcrest for custom matcher implementation. We need to import <code class=\"language-text\">Case</code> class from schemathesis library to do the actual response definition validation. The following custom matcher implementation assumes usage of <code class=\"language-text\">requests</code> library for performing HTTP request. But this could be easily adjusted for any http library of your choice.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>base_matcher <span class=\"token keyword\">import</span> BaseMatcher\n<span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> Response\n<span class=\"token keyword\">from</span> schemathesis <span class=\"token keyword\">import</span> Case\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SatisfyApiSpec</span><span class=\"token punctuation\">(</span>BaseMatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">,</span> spec_url_template<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_schema <span class=\"token operator\">=</span> schema\n        self<span class=\"token punctuation\">.</span>_spec_url_template <span class=\"token operator\">=</span> spec_url_template\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_matches</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> item<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        method <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>method\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        endpoint <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_schema<span class=\"token punctuation\">.</span>endpoints<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_spec_url_template<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span>\n        Case<span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>validate_response<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Unable to map url: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>_spec_url_template<span class=\"token punctuation\">}</span></span><span class=\"token string\"> with method: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span></span><span class=\"token string\"> to provided schema'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> AssertionError <span class=\"token keyword\">as</span> assertError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span>assertError<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">satisfy_api_spec</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> spec_url_template<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> SatisfyApiSpec<span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> spec_url_template<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This expose <code class=\"language-text\">satisfy_api_spec</code> function which can be imported in our test file and used inside PyHamcrest’s <code class=\"language-text\">asset_that</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">assert_that<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> satisfy_api_spec<span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> spec_url_template<span class=\"token operator\">=</span>’<span class=\"token operator\">/</span>store<span class=\"token operator\">/</span>order’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">satisfy_api_spec</code> accepts two parameters — <code class=\"language-text\">schema</code> and <code class=\"language-text\">spec_url_template</code>. The <code class=\"language-text\">schema</code> can be initialized in multiple ways — <code class=\"language-text\">from_path</code>, <code class=\"language-text\">from_dict</code>, <code class=\"language-text\">from_uri</code>, <code class=\"language-text\">from_file</code> and <code class=\"language-text\">from_wsgi</code>. And <code class=\"language-text\">spec_url_template</code> is API url path template as specified in open api specification. The whole test could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> schemathesis\n<span class=\"token keyword\">from</span> hamcrest <span class=\"token keyword\">import</span> assert_that\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>matchers<span class=\"token punctuation\">.</span>response_schema_matcher <span class=\"token keyword\">import</span> satisfy_api_spec\nschema <span class=\"token operator\">=</span> schemathesis<span class=\"token punctuation\">.</span>from_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://0.0.0.0:8080/swagger.json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_get_store_orders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://0.0.0.0:8080/store/order'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    assert_that<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> \n      satisfy_api_spec<span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span>  spec_url_template<span class=\"token operator\">=</span>’<span class=\"token operator\">/</span>store<span class=\"token operator\">/</span>order’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In case actual API implementation differs from API definition you will get a validation with detailed error message on which specific property of the actual response does not conform to API definition.</p>\n<p>Happy API testing.</p>","fields":{"tagSlugs":["/tags/api-testing/","/tags/python/","/tags/schemathesis/","/tags/pyhamcrest/"],"slug":"/blog/custom-matcher-for-api-definition/"},"frontmatter":{"title":"Custom matcher for API definition in Python with PyHamcrest and Schemathesis","tags":["api testing","python","schemathesis","pyhamcrest"],"date":"2020-06-02T02:46:37.121Z","description":"Tutorial on how to create custom matcher for API response schema using schemathesis and OAS/swagger."}}},"pageContext":{"slug":"/blog/custom-matcher-for-api-definition/"}},"staticQueryHashes":[]}