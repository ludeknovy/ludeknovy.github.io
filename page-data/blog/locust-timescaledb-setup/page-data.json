{"componentChunkName":"component---src-templates-post-template-jsx","path":"/blog/locust-timescaledb-setup/","result":{"data":{"site":{"siteMetadata":{"title":"ludeknovy.tech","subtitle":"Thoughts on testing and test automation","copyright":"© All rights reserved.","author":{"name":"","twitter":"#"},"disqusShortname":"","url":"https://www.ludeknovy.tech"}},"markdownRemark":{"id":"480e40f8-bfce-516a-8ae9-e026c286b976","html":"<p>The Locust plugin repository contains TimescaleDB listener to log performance stats. But unfortunately for some reason, it is very difficult to do the initial TimescaleDB setup. The provided schema did not work for me. There is an <a href=\"https://github.com/SvenskaSpel/locust-plugins/issues/11\">issue</a> for it with possible mitigation and my solution for it. I took the original schema and modified it, so it works out of the box when you include it into docker.\nYou can find the adjusted schema in my <a href=\"%5Blocust-timescaledb/schema.sql%20at%20main%20%C2%B7%20ludeknovy/locust-timescaledb%20%C2%B7%20GitHub%5D(https://github.com/ludeknovy/locust-timescaledb/blob/main/schema.sql)\">repository</a>.</p>\n<p>Then build it: <code class=\"language-text\">docker build -t timescale .</code>\nAnd run the docker image: <code class=\"language-text\">docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password timescale</code></p>\n<p>Now you can use the prepared TimescaleListener from locust-plugins repository. To include it in your test all you have to do is:</p>\n<div class=\"gatsby-highlight\" data-language=\"@events.init.add_listener\"><pre class=\"language-@events.init.add_listener\"><code class=\"language-@events.init.add_listener\">def on_locust_init(environment, **_kwargs):\n    TimescaleListener(env=environment, testplan=„timescale_listener_ex“, target_env=„myTestEnv“)</code></pre></div>\n<p>Now you might need to provide a user and password in <code class=\"language-text\">create_dbconn</code> in <code class=\"language-text\">TimescaleListener</code> and set up <code class=\"language-text\">PGHOST</code> env var.</p>\n<p>Now you are all set up and you can start your test and new records should start popping up in TimescaleDB.</p>\n<p>To visualize the results you have to connect your TimescaleDB to\nGrafana. The team behind locust-plugins has prepared a dashboard definition you can easily import and have a very robust monitoring solution for your performance tests.</p>","fields":{"tagSlugs":["/tags/performance-testing/","/tags/locust/"],"slug":"/blog/locust-timescaledb-setup/"},"frontmatter":{"title":"TimescaleDB setup for Locust real-time monitoring","tags":["performance testing","locust"],"date":"2021-01-15T02:46:37.121Z","description":"Setting up TimescaleDB for monitoring your Locust performance tests"}}},"pageContext":{"slug":"/blog/locust-timescaledb-setup/"}},"staticQueryHashes":[]}