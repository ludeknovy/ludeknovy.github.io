<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ludeknovy.tech]]></title><description><![CDATA[ludeknovy.tech]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 06 Sep 2020 05:51:42 GMT</lastBuildDate><item><title><![CDATA[KPI validation with locust.io]]></title><description><![CDATA[Tutorial on how to create KPI validation for locust.io to automatically check whether application meets performance criteria.]]></description><link>https://ludeknovy.tech/blog/kpi-validation-with-locust/</link><guid isPermaLink="false">https://ludeknovy.tech/blog/kpi-validation-with-locust/</guid><pubDate>Mon, 31 Aug 2020 02:46:37 GMT</pubDate><content:encoded>&lt;p&gt;In performance testing KPIs should be an inherent part of requirements, thus we don’t blindly stress your application but rather we have clear idea what your stack should handle under defined circumstances. Real world example could be: “The 90 percentile should be below 50ms while handling 500 RPS (requests per second)”.&lt;/p&gt;
&lt;p&gt;Once we fine tuned you application to meet defined performance criteria we can hook up this test into your CI/CD tool and run the same performance test as a part of your delivery pipeline to prevent performance regression. To fully automate whole process — we want want to look at the results only when the build has failed because of defined KPIs were not met — we need to add ability to decide whether to pass or fail to our Locust script. Locust doesn’t have this feature baked in, but fortunately Locust is very hackable and provide nice API for customization.&lt;/p&gt;
&lt;p&gt;For the purpose of automated KPI validation we are going to create custom plugin using locust’s event hooks and its inner statistics. The overall plugin design is pretty simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register quitting event&lt;/li&gt;
&lt;li&gt;Get all statistics and serialize them&lt;/li&gt;
&lt;li&gt;Calculate missing metrics (RPS, percentiles, …)&lt;/li&gt;
&lt;li&gt;heck provided KPI definition&lt;/li&gt;
&lt;li&gt;Validate provided KPI agains actual measurements&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The whole KPI plugin code can be found &lt;a href=&quot;https://gist.githubusercontent.com/ludeknovy/af039ea46d568490cd8d09f5d0dad90d/raw/4c423298df3cd41ff42cc1ce89d78210f7ec9157/kpi_listener.py&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we have to register KpiPlugin class within your Locust script and define KPI(s) like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;init&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_listener
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;on_locust_init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;environment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;_kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    KPI_SETTINGS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/store/inventory&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;percentile_90&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rps&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error_rate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    KpiPlugin&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;env&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;environment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; kpis&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;KPI_SETTINGS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above script will make your build fail in case /store/inventory endpoint won’t meet one of the defined criteria — 90 percentile is worse than 50ms, RPS is under 500, error rate is higher than 0%.&lt;/p&gt;
&lt;p&gt;Happy performance testing.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Custom matcher for API definition in Python with PyHamcrest and Schemathesis]]></title><description><![CDATA[Tutorial on how to create custom matcher for API response schema using schemathesis and OAS/swagger.]]></description><link>https://ludeknovy.tech/blog/custom-matcher-for-api-definition/</link><guid isPermaLink="false">https://ludeknovy.tech/blog/custom-matcher-for-api-definition/</guid><pubDate>Tue, 02 Jun 2020 02:46:37 GMT</pubDate><content:encoded>&lt;p&gt;In the other article I showed you how to create custom matcher for API status code. And today we are going to look at how to do the same for easy and fast testing of API response definition.&lt;/p&gt;
&lt;p&gt;For this purpose we are going to need &lt;a href=&quot;https://github.com/kiwicom/schemathesis&quot;&gt;Schemathesis&lt;/a&gt; library. This tool makes API definition testing very easy. It could be use as CLI or in-code as standard python package. And this is how Schemathesis describe itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Schemathesis is a tool for testing your web applications built with Open API / Swagger specifications.
It reads the application schema and generates test cases which will ensure that your application is compliant with its schema.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus Schemathesis can be used not only to assert that API response conforms to API definition but can be used to do property-based testing for specified API input. In this article we are going to focus only on API response assertions. If you’d like know more about Schemathesis check this &lt;a href=&quot;https://code.kiwi.com/schemathesis-property-based-testing-for-api-schemas-52811fd2b0a4&quot;&gt;post&lt;/a&gt; from its author.&lt;/p&gt;
&lt;p&gt;As in previous article we use PyHamcrest for custom matcher implementation. We need to import &lt;code class=&quot;language-text&quot;&gt;Case&lt;/code&gt; class from schemathesis library to do the actual response definition validation. The following custom matcher implementation assumes usage of &lt;code class=&quot;language-text&quot;&gt;requests&lt;/code&gt; library for performing HTTP request. But this could be easily adjusted for any http library of your choice.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; hamcrest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;base_matcher &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; BaseMatcher
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; requests &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Response
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; schemathesis &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Case

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SatisfyApiSpec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BaseMatcher&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; spec_url_template&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; schema
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_spec_url_template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; spec_url_template
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_matches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;
        method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;method
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        endpoint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoints&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_spec_url_template&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        Case&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;endpoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;validate_response&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; KeyError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; Exception&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;Unable to map url: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_spec_url_template&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; with method: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; to provided schema&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; AssertionError &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; assertError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; Exception&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assertError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;satisfy_api_spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; spec_url_template&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; SatisfyApiSpec&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; spec_url_template&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This expose &lt;code class=&quot;language-text&quot;&gt;satisfy_api_spec&lt;/code&gt; function which can be imported in our test file and used inside PyHamcrest’s &lt;code class=&quot;language-text&quot;&gt;asset_that&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;assert_that&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; satisfy_api_spec&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; spec_url_template&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;’&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;store&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;order’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;satisfy_api_spec&lt;/code&gt; accepts two parameters — &lt;code class=&quot;language-text&quot;&gt;schema&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;spec_url_template&lt;/code&gt;. The &lt;code class=&quot;language-text&quot;&gt;schema&lt;/code&gt; can be initialized in multiple ways — &lt;code class=&quot;language-text&quot;&gt;from_path&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;from_dict&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;from_uri&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;from_file&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;from_wsgi&lt;/code&gt;. And &lt;code class=&quot;language-text&quot;&gt;spec_url_template&lt;/code&gt; is API url path template as specified in open api specification. The whole test could look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; schemathesis
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; hamcrest &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; assert_that
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matchers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response_schema_matcher &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; satisfy_api_spec
schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; schemathesis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from_uri&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://0.0.0.0:8080/swagger.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test_get_store_orders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http://0.0.0.0:8080/store/order&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    assert_that&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
      satisfy_api_spec&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  spec_url_template&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;’&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;store&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;order’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case actual API implementation differs from API definition you will get a validation with detailed error message on which specific property of the actual response does not conform to API definition.&lt;/p&gt;
&lt;p&gt;Happy API testing.&lt;/p&gt;</content:encoded></item></channel></rss>